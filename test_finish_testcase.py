# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.common.exceptions import TimeoutException
import os
from dotenv import load_dotenv
import shutil
import sqlite
from sqlite import GitLab_Issue_Obj
from openpyxl import load_workbook
import pyautogui

project_links = [
                 ["https://git.iptp.net/xm/xm-web/-/issues/?label_name%5B%5D=Need%20to%20test", 'xm-web', "https://git.iptp.net/xm/xm-web/-/issues/new"],
                 ["https://git.iptp.net/andre/xm-api/-/issues/?label_name%5B%5D=Need%20to%20test", "xm-api", "https://git.iptp.net/andre/xm-api/-/issues/new"],
                 ["https://git.iptp.net/erp/erp-web/-/issues/?label_name%5B%5D=Need%20to%20test", "erp-web", "https://git.iptp.net/erp/erp-web/-/issues/new"],
                 ["https://git.iptp.net/erp/erp-server/-/issues/?label_name%5B%5D=Need%20to%20test", "erp-server", "https://git.iptp.net/erp/erp-server/-/issues/new"]
                ]
sign_in_url = "https://git.iptp.net/users/sign_in"
issue_list = []

try:
  load_dotenv()
  GITLAB_USERNAME = os.environ["GITLAB_USERNAME"]
  GITLAB_PASSWORD = os.environ["GITLAB_PASSWORD"]
  TEST_ISSUE_TEMP = os.environ["TEST_ISSUE_TEMP"]
  TEST_ISSUE_FOLDER_TEMP = os.environ["TEST_ISSUE_FOLDER_TEMP"]
  TEST_ISSUE_DESC_TEMP = os.environ["TEST_ISSUE_DESC_TEMP"]
  TEST_ISSUE_FILE_TEMP = os.environ["TEST_ISSUE_FILE_TEMP"]
  # print("Environment variable>>> ", TEST_ISSUE_TEMP, TEST_ISSUE_DESC_TEMP)

except KeyError:
  print("Environment variable does not exist", KeyError)


class TestFinishGitlab():
  def setup_method(self, method):
    delay = 3 # seconds
    self.driver = webdriver.Chrome()
    self.wait = WebDriverWait(self.driver, delay)
    self.vars = {}
    print("1")
  
  def teardown_method(self, method):
    self.driver.quit()
    print("3nd")
  
  def update_result(self, iss_number):
    self.driver.get("https://docs.google.com/spreadsheets/d/1IATFgzFi9-t5bwlzXBL0l8HdWvyGIkLK/edit?usp=sharing&ouid=111105249960062423142&rtpof=true&sd=true")

  def update_gitlab_test_issues(self, test_issue_url, project, test_file_path):
    print("update_gitlab_test_issues", test_issue_url, project, test_file_path)
    self.driver.get(test_issue_url)
    self.driver.set_window_size(1047, 652)
    issue_test_desc = """Test Pass.

Please check the attach file for test result detail.

"""
    self.driver.find_element(By.ID, "note-body").send_keys(issue_test_desc)
    bt_attach_file = self.driver.find_element(By.XPATH, "//button[@title='Attach a file or image']")
    bt_attach_file.click() # Attach file
    time.sleep(1)
    pyautogui.write(test_file_path) 
    pyautogui.press('enter')

    time.sleep(1)
    elem = self.wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//button[@class='btn btn-confirm btn-md gl-button split-content-button']")))
    elem.click()

  def remove_label_qa(self):
    try:
      elem_qa = self.wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//span[@data-qa-label-name='wf:QA']/button")))
      elem_qa.click()
    except Exception as ex:
      print("Remove label wf:QA, Exception: " + str(ex.msg))

  def update_gitlab_issues(self, issue_url_item, id):
    print("update_gitlab_issues", issue_url_item, id)
    
    # update main issue
    self.driver.get(issue_url_item)
    time.sleep(3)
    elem = self.wait.until(expected_conditions.presence_of_element_located((By.XPATH, "//button[@data-qa-selector='edit_link']")))
    self.driver.find_element(By.XPATH, "//button[@data-qa-selector='edit_link']").click() # Open textbox to input 
    elem = self.wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//input[@aria-label='Search labels']")))
    elem_find_label = self.driver.find_element(By.XPATH, "//input[@aria-label='Search labels']")
    elem_find_label.click()

    elem_find_label.send_keys("Test Pass")
    elem_testcase = self.wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//button[@class='dropdown-item is-focused']")))
    time.sleep(1)
    elem_testcase.send_keys(Keys.SPACE)

    # elem_find_label.send_keys("wf:QA")
    # elem_testcase = self.wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//button[@class='dropdown-item is-focused']")))
    # time.sleep(1)
    # elem_testcase.send_keys(Keys.SPACE)

    elem_find_label.send_keys("wf:Ready_for_UAT")
    elem_testcase = self.wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//button[@class='dropdown-item is-focused']")))
    time.sleep(1)
    elem_testcase.send_keys(Keys.SPACE)

    elem = self.wait.until(expected_conditions.element_to_be_clickable((By.XPATH, "//button[@data-qa-selector='close_labels_dropdown_button']")))
    elem_close_asssign_label = self.driver.find_element(By.XPATH, "//button[@data-qa-selector='close_labels_dropdown_button']")
    elem_close_asssign_label.click()

    time.sleep(1)
    self.remove_label_qa()
    
    # # return query
    return """UPDATE ISSUE
SET test_state = 'Done'
WHERE id = {0};
""".format(id)

  def update_file_testcase(self, path, iss_test_number, issue_desc, test_scenario):
    print("Update file testcase", path)
    
    #load excel file
    workbook = load_workbook(filename=path)
    
    #open workbook
    sheet = workbook.active
    
    #modify the desired cell
    sheet["C1"] = iss_test_number
    sheet["F1"] = issue_desc
    sheet["B14"] = test_scenario
    
    #save the file
    workbook.save(path)


  def create_test_issue_and_file(self, iss_number, project, new_issue_url):
    issue_test_name = TEST_ISSUE_TEMP + iss_number
    issue_test_desc = TEST_ISSUE_DESC_TEMP + " #" + iss_number
    self.driver.get(new_issue_url)
    self.driver.find_element(By.ID, "issue_title").send_keys(issue_test_name)
    self.driver.find_element(By.ID, "issue_description").send_keys(issue_test_desc)
    a_assign_to_me_link = self.driver.find_element(By.XPATH, "//a[@data-qa-selector='assign_to_me_link']")
    a_assign_to_me_link.click() # Assign issue test to QA
    self.driver.find_element(By.XPATH, "//button[@type='submit']").click() # Create test Issue
    issue_test_url = self.driver.current_url
    issue_test_number = issue_test_url[issue_test_url.rfind("/") + 1:]
    file_name = "{0}-{1}-{2}".format(TEST_ISSUE_FILE_TEMP, iss_number, issue_test_number)
    print(">>>>New Test Issue url: ", issue_test_url)
    self.driver.find_element(By.XPATH, "//button[@data-qa-selector='related_issues_plus_button']").click() # Open textbox to input 
    self.driver.find_element(By.ID, "add-related-issues-form-input").send_keys(iss_number + " ") # Input related issue 
    self.driver.find_element(By.XPATH, "//button[@type='submit']").click() # Click Add button
    elem = self.wait.until(expected_conditions.presence_of_element_located((By.XPATH, "//ul[@class='related-items-list content-list']"))) # Wait for finish add related 
    folder_name = TEST_ISSUE_FOLDER_TEMP + iss_number
    path = self.create_testcase_file(iss_number, project, folder_name, file_name)
    self.update_file_testcase(path, issue_test_number, issue_test_desc, "")
    return issue_test_url, path

  def collect_finish_gitlab_issues(self):
    criteria = "WHERE test_state LIKE 'Finish'"
    self.issue_list = sqlite.getListIssue(criteria)

  def gitlabsignin(self):
    print("gitlabsignin")
    self.driver.get(sign_in_url)
    self.driver.set_window_size(1047, 652)
    self.driver.find_element(By.ID, "user_login").send_keys(GITLAB_USERNAME)
    self.driver.find_element(By.ID, "user_password").send_keys(GITLAB_PASSWORD)
    submit_ele = self.driver.find_element(By.XPATH, "//button[@type='submit']")
    submit_ele.click()

  def test_finish_testcase(self):
    print("2")
    self.gitlabsignin()
    self.collect_finish_gitlab_issues()
    query_lst = []
    for row in self.issue_list:
      # id, project, path, test_state, issue_test_url, issue_test_number, issue_number, issue_url
      self.update_gitlab_test_issues(test_issue_url=row.issue_test_url, project=row.project, test_file_path=row.path)
      # query_lst.append(self.update_gitlab_issues(issue_url_item=row.issue_url, id=row.id))
      query = self.update_gitlab_issues(issue_url_item=row.issue_url, id=row.id)
      sqlite.executeQuery(query) # Save to db
    self.driver.close()
